/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as BrowserLayoutRouteImport } from './routes/_browserLayout'
import { Route as BrowserLayoutSplatRouteRouteImport } from './routes/_browserLayout/$/route'
import { Route as BrowserLayoutSplatFileListLayoutRouteImport } from './routes/_browserLayout/$/_fileListLayout'
import { Route as BrowserLayoutSplatFileListLayoutIndexRouteImport } from './routes/_browserLayout/$/_fileListLayout/index'

const BrowserLayoutRoute = BrowserLayoutRouteImport.update({
  id: '/_browserLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const BrowserLayoutSplatRouteRoute = BrowserLayoutSplatRouteRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => BrowserLayoutRoute,
} as any)
const BrowserLayoutSplatFileListLayoutRoute =
  BrowserLayoutSplatFileListLayoutRouteImport.update({
    id: '/_fileListLayout',
    getParentRoute: () => BrowserLayoutSplatRouteRoute,
  } as any)
const BrowserLayoutSplatFileListLayoutIndexRoute =
  BrowserLayoutSplatFileListLayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => BrowserLayoutSplatFileListLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/$': typeof BrowserLayoutSplatFileListLayoutRouteWithChildren
  '/$/': typeof BrowserLayoutSplatFileListLayoutIndexRoute
}
export interface FileRoutesByTo {
  '/$': typeof BrowserLayoutSplatFileListLayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_browserLayout': typeof BrowserLayoutRouteWithChildren
  '/_browserLayout/$': typeof BrowserLayoutSplatRouteRouteWithChildren
  '/_browserLayout/$/_fileListLayout': typeof BrowserLayoutSplatFileListLayoutRouteWithChildren
  '/_browserLayout/$/_fileListLayout/': typeof BrowserLayoutSplatFileListLayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/$' | '/$/'
  fileRoutesByTo: FileRoutesByTo
  to: '/$'
  id:
    | '__root__'
    | '/_browserLayout'
    | '/_browserLayout/$'
    | '/_browserLayout/$/_fileListLayout'
    | '/_browserLayout/$/_fileListLayout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  BrowserLayoutRoute: typeof BrowserLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_browserLayout': {
      id: '/_browserLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BrowserLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_browserLayout/$': {
      id: '/_browserLayout/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof BrowserLayoutSplatRouteRouteImport
      parentRoute: typeof BrowserLayoutRoute
    }
    '/_browserLayout/$/_fileListLayout': {
      id: '/_browserLayout/$/_fileListLayout'
      path: ''
      fullPath: '/$'
      preLoaderRoute: typeof BrowserLayoutSplatFileListLayoutRouteImport
      parentRoute: typeof BrowserLayoutSplatRouteRoute
    }
    '/_browserLayout/$/_fileListLayout/': {
      id: '/_browserLayout/$/_fileListLayout/'
      path: '/'
      fullPath: '/$/'
      preLoaderRoute: typeof BrowserLayoutSplatFileListLayoutIndexRouteImport
      parentRoute: typeof BrowserLayoutSplatFileListLayoutRoute
    }
  }
}

interface BrowserLayoutSplatFileListLayoutRouteChildren {
  BrowserLayoutSplatFileListLayoutIndexRoute: typeof BrowserLayoutSplatFileListLayoutIndexRoute
}

const BrowserLayoutSplatFileListLayoutRouteChildren: BrowserLayoutSplatFileListLayoutRouteChildren =
  {
    BrowserLayoutSplatFileListLayoutIndexRoute:
      BrowserLayoutSplatFileListLayoutIndexRoute,
  }

const BrowserLayoutSplatFileListLayoutRouteWithChildren =
  BrowserLayoutSplatFileListLayoutRoute._addFileChildren(
    BrowserLayoutSplatFileListLayoutRouteChildren,
  )

interface BrowserLayoutSplatRouteRouteChildren {
  BrowserLayoutSplatFileListLayoutRoute: typeof BrowserLayoutSplatFileListLayoutRouteWithChildren
}

const BrowserLayoutSplatRouteRouteChildren: BrowserLayoutSplatRouteRouteChildren =
  {
    BrowserLayoutSplatFileListLayoutRoute:
      BrowserLayoutSplatFileListLayoutRouteWithChildren,
  }

const BrowserLayoutSplatRouteRouteWithChildren =
  BrowserLayoutSplatRouteRoute._addFileChildren(
    BrowserLayoutSplatRouteRouteChildren,
  )

interface BrowserLayoutRouteChildren {
  BrowserLayoutSplatRouteRoute: typeof BrowserLayoutSplatRouteRouteWithChildren
}

const BrowserLayoutRouteChildren: BrowserLayoutRouteChildren = {
  BrowserLayoutSplatRouteRoute: BrowserLayoutSplatRouteRouteWithChildren,
}

const BrowserLayoutRouteWithChildren = BrowserLayoutRoute._addFileChildren(
  BrowserLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  BrowserLayoutRoute: BrowserLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
